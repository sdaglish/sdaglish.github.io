#+TITLE: Developing PIC24 Projects using the Command Line
#+DATE: 2020-02-19
#+AUTHOR: Steven Daglish
#+PROPERTY: LANGUAGE en
#+PROPERTY: SUMMARY How to develop PIC24 projects using the command line as much as possible
#+PROPERTY: SLUG developing_pic24_projects_using_the_command_line
#+PROPERTY: TAGS pic, pic24, command-line


* Introduction

In both my professional and private projects, I use Microchip's PIC microprocessors A LOT. In fact, at the time of writing, I have about 10 different projects on the go at the same time, all of which are using different PICs (mainly PIC16 and PIC24s).

The easiest way to get started developing PIC programs if by using Microchip's IDE: MPLAB X (v5.30 at the time of writing). This allows you to create new projects, add files, compile, and flash the firmware with relative ease. For the most part, it does work pretty well, and for a beginner it's probably the best way to get started with PIC development (and it was how I also got started).

However, it's not perfect, and has a number of issues that were starting to annoy me a bit (maybe there were ways around them, but I didn't find anything, and by that point I was starting to look into different editors anyway). Some of the main issues I was having were:

 - Incorrect red underlining, saying functions that did not exist (when I knew they did)
 - Not being able to flash the code without the code first being rebuilt (even when no changes were made to the software).
 - The auto-complete would be a bit odd sometimes, where sometimes it just wouldn't work.
 - Inability to choose a different text editor (I'm a fan of Vim, and missed a lot of the keybindings as well as the modal way of working).
 - Not being able to flash without using the mouse. This one annoys me a lot, and it would be great to find out there is a way get around this one).
 - A few other things that I won't get into here.
 - The built in version control didn't seem to work that well, but that could be that I was trying to use it before I was profesiont with git (I now prefer to use the command line for version control anyway).

A don't wish to slag off the IDE as it is perfectly usable, and I know a number of people who use it professionally without any issues. However, I needed to look into alternatives that would give me the ability to do the following:

 - Use the command line when I wanted to use it.
 - Allow me to use any editor I wanted (not including editing in whatever, and then compiling and flashing in MPLAB).
   - Personally, I use Vim, but I have used the setup below with vs-code as well.
 - Allow me to compile and flash using either the command line or directly in my editor IDE of choice
 - Debug without using MPLAB (still working on a solution to that one...).
 - Include unit testing.
   - This could be through the command line, in which case, I could still use MPLAB for the main project work, but I'm looking at something a bit more integrated.
   - I'm using Ceedling to unit test my projects, but I'll discuss that in another blog.
 - Add auto-complete and linting that work better than what I was getting with MPLAB.
   - This is very editor / IDE specific. Since I'm using Vim, I find that YouCompleteMe works very well, even in this embedded setup, and I'll discuss that in another blog.

That's quite a lot, but for now, I'm going to concentrate on getting everything working on the command line. I'll worry about the editor / IDE integration at another point.

A couple of things to note:

 - I'm using Windows 10 with Cmder
 - You still need to have MPLAB X installed.

* Getting everything together

As mentioned above, I'm using Windows 10. I have the same setup working fine on Windows 7. I will probably do some testing on a Linux VM at some point. I have no means of testing things on a Mac machine (please let me know if you're a Mac user and have any experience with a similar setup as I'd be interested to know how things are different / similar).

** Path System Variables

The PATH system variable will need to be updated to include a couple of MPLAB files.

I will explain these a bit more when they are mentioned later or, but for now, the following are what I'm using:

 - ~C:\Program Files (x86)\Microchip\MPLABX\v5.30\mplab_platform\bin~
 - ~C:\Program Files (x86)\Microchip\xc16\v1.41\bin~
 - ~C:\Program Files (x86)\Microchip\MPLABX\v5.20\mplab_platform\mplab_ipe~

Of course, this will massively depend on your system setup.
   
** Installation

Despite trying to not use MPLAB, for this setup, you will need to install MPLAB X [[https://www.microchip.com/mplab/mplab-x-ide][here]]. At the time of writing, the latest version is v5.30, but as we aren't using much of MPLAB, the instructions below should work on most versions (I'll update the instructions if I find anything breaks).

The installation file will install both the IDE and the IPE. We won't be using the IPE, but for some, it might be of use.

If you're on Windows, I'd also advice installing Cmder. This is a terminal emulator for Windows that has a similar feel / look to bash, and has some interesting features for git use. Cmder can be found at [[https://cmder.net][https://cmder.net]]

Once you're all set up, open up MPLAB X and create your project as you would for any other project.


* Adding new files

When adding new files to an PIC project, you can either use the MPLAB IDE or you can add them manually by editing nbproject/configurations.xml . Both work well, depending on your needs.

** Adding files by MPLAB X IDE

When setting up a new project with MPLAB, I will often use the IDE to create the main.c file. The reasons I do this are:

 - I already have the IDE open, so it's quick and simple to do.
 - I don't have to use any command line tools at this early stage to update the makefile and other config files (which you will need to do when using the command line / configurations.xml edits)
 - I can compile the firmware in the IDE and make sure everything is setup as expected
 - I can use the IDE to setup a couple of other things such as the configuration bits
 - If I have the target hardware at hand, I can flash using the IDE. This way, I know that any flashing issues later are related to my command-line setup, and not a hardware issue.

After I've done the above, I will often close the IDE and start working on the command line. However, if you're adding a lot of files now, it might be easier to do this now while the IDE is open as it will probably be easier than adding them all to the configurations.xml file, but that's a personal preference.

** Adding files without the IDE

It is possible to add files to the project without using the IDE. All the information we need is contained with the file nbproject\configurations.xml

Open up the file and have a look through it. Be careful though, because if you edit it incorrectly, you can mess up your project and it can be very difficult to fix (unless you're using some version of version control, in which case edit away).

The bit that we are interested is very close to the top under the line 

~<logicalFolder name="root" displayName="root" projectFiles="true">~

This tag contains all the information used by the Makefile generator, and by MPLAB to compile the project. You can add folders, sub-folders, and files as you see fit.

For example, lets say we want to add a module called ~port_a_driver~, and have the ~.c~ in folder ~src~ and the ~.h~ file in folder ~inc~.

Assuming these folder and files already exist (manually create them if you haven't), the ~logicalFolder~ tag is updated as shown below:

#+begin_src xml -n 
  <logicalFolder name="root" displayName="root" projectFiles="true">
    <logicalFolder name="HeaderFiles"
                   displayName="Header Files"
                   projectFiles="true">
       <itemPath>inc/port_a_driver.h</itemPath>   
    </logicalFolder>
    <logicalFolder name="LinkerScript"
                   displayName="Linker Files"
                   projectFiles="true">
    </logicalFolder>
    <logicalFolder name="SourceFiles"
                   displayName="Source Files"
                   projectFiles="true">
       <itemPath>src/port_a_driver.c</itemPath>
    </logicalFolder>
    <logicalFolder name="ExternalFiles"
                   displayName="Important Files"
                   projectFiles="false">
       <itemPath>Makefile</itemPath>
    </logicalFolder>
    <itemPath>main.c</itemPath>
  </logicalFolder>
#+end_src
 
The main bits of information here are in lines 5 and 14. Here is where we are telling the config there the files are in the project folder, and where they will show up in MPLAB. 

Next you need to call ~prjMakefilesGenerator.bat .~ in the project's root folder. This will use the edited config file above and produce a new Makefile that contains references to the above two files.

For the above to work you will need to add the folder containing the above to your ~PATH~. For me this was at ~C:\Program Files (x86)\Microchip\MPLABX\v5.30\mplab_platform\bin~

If everything went well, then the generator will finish quietly with no output (I even found that adding the ~-v~ didn't show anything).

If the generator was successful, you can then call ~make~ in the project's root folder and the project will compile. The output will be exactly the same as if you were compiling in MPLAB, except that you won't have the pretty colours to help show important information. The information will still be there, but you'll have to pick it out a bit more. That is unless your editor / IDE is setup to use the complier's output (which I won't go into here, but I do have something setup in Vim).


* Compiling the firmware

Once you have the files added to your project and the new Makefile, compiling the software is pretty simple by typing ~make~ from within the project home folder. 

However, to get this to work, you need to add the location of the xc16 bin folder to your PATH, which on my machine is ~C:\Program Files (x86)\Microchip\xc16\v1.41\bin~

Typing in ~make~ and pressing return, you should have the same output that you get when you're compiling in MPLAB. This will include any warning / error messages, confirmation that the compile was successful (or not), and the amount of program and data space used up.

* Flashing the firmware

This one is a bit more difficult, as it depends on what you're using to flash the device, and what device you are flashing.

In my example below, I'm going to be using the PIC24FJ256GA702 and the PICkit3 for flashing the firmware. Flashing different PICs will be very similar (at least for PIC16 and PIC24, I'm unsure about PIC32), but if you use a different PICkit (or something else) to flash your firmware, you'll need to investigate a bit further.

For flashing on the command line, I use ~pk3cmd~, which on my system was in the folder ~C:\Program Files (x86)\Microchip\MPLABX\v5.20\mplab_platform\mplab_ipe~. You'll need to add the appropriate folder to your PATH system variable.

Typing in ~pk3cmd~ will bring up the help file, which will give you a lot more information that I'm going to go into here.

The main bits are:
 - P<part>  24fj256ga702
 - F<file>  dist\default\production\test_project.X.production.hex
 - T<tool>  PK3 = PICKIT3 (look here for more details on different flashing tools)
 - M       Programs all available memory (you can select to only program certain bits if wanted
 - L       Release from device from reset after programming.

Using the above, I can use the following command line to flash the firmware:

~pk3cmd -Fdist/default/production/test_project.X.production.hex  -P24FJ64GA204 -L -M~

The verbose output will let you know if you were successful or not.

As I am very likely to make a mistake with the above command line, I'll normally place the above line into a file called ~flash.bat~, allowing me to call, ~flash~.

* Wrapping it up   

Following the above should give you a minimum setup needed to develop PIC24 devices using the command line. I use this setup daily, but with a few additions for unit testing and for my Vim interaction's (both of which I'll discuss another time).


